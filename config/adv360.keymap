/* Defines Colemak-DHm for programmers with german characters on a Kinesis Advantage 360 */
/* Intended to use with the german keyboard layout. */

/* standard includes for keys, bluetooth, rgb and backlight */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/* Include zmk-nodefree macros for convenience */
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_adv360.h"
#include "../zmk-nodefree-config/international_chars/german_alt.dtsi"

/* layer and key shortcuts */
#define ___ &trans
#define DEF 0
#define NAV 1
#define NUM 2
#define GER 3

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
)

#define GER_Y (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Z))
#define GER_Z (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Y))

#define GERS_A (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_A)))
#define GERS_B (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_B)))
#define GERS_C (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_C)))
#define GERS_D (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_D)))
#define GERS_E (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_E)))
#define GERS_F (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_F)))
#define GERS_G (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_G)))
#define GERS_H (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_H)))
#define GERS_I (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_I)))
#define GERS_J (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_J)))
#define GERS_K (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_K)))
#define GERS_L (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_L)))
#define GERS_M (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_M)))
#define GERS_N (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_N)))
#define GERS_O (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_O)))
#define GERS_P (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_P)))
#define GERS_Q (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))
#define GERS_R (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_R)))
#define GERS_S (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_S)))
#define GERS_T (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_T)))
#define GERS_U (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_U)))
#define GERS_V (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_V)))
#define GERS_W (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_W)))
#define GERS_X (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_X)))
#define GERS_Y (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Z)))
#define GERS_Z (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Y)))

/* German ä */
#define GER_UA (SINGLE_QUOTE)

/* German ü */
#define GER_UU (LEFT_BRACKET)

/* German ö */
#define GER_UO (SEMICOLON)

/* German ß */
#define GER_SZ (MINUS)

/* German Ä */
#define GERS_UA (LS(SINGLE_QUOTE))

/* German Ü */
#define GERS_UU (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE)))

/* German Ö */
#define GERS_UO (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SEMICOLON_AND_COLON)))

/* German ; */
#define GER_SEMI (LESS_THAN)

/* German § */
#define GER_PARA (HASH)

/* German ' */
#define GER_SQT (PIPE)

/* German < */
#define GER_LT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))

/* German > */
#define GER_GT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German - */
#define GER_MINUS (SLASH)

// German + */
#define GER_PLUS (RBKT)

/* German * (star) */
#define GER_STAR (RBRC)

/* German / */
#define GER_SLASH (AMPERSAND)

/* German _ */
#define GER_UNDER (QUESTION)

/* German " */
#define GER_DQT (AT)

/* German = */
#define GER_EQUAL (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German \ */
#define GER_BSLH (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))

/* German . */
#define GER_DOT (DOT)

/* German # */
#define GER_HASH (BSLH)

/* German & */
#define GER_AMPS (CARET)

/* German € */
#define GER_EURO (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_E)))

/* German | */
#define GER_PIPE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))

/* German ~ */
#define GER_TILDE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))

/* German : */
#define GER_COLON (GT)

/* German $ */
#define GER_DOLLAR (DOLLAR) 

/* German [ */
#define GER_LBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK)))

/* German ] */
#define GER_RBKT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS)))

/* German ( */
#define GER_LPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK))) 

/* German ) */
#define GER_RPAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS))) 

/* German { */
#define GER_LBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_7_AND_AMPERSAND)))

/* German } */
#define GER_RBRC (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))

/* German % */
#define GER_PERCENT (PERCENT) 

/* German ? */
#define GER_QUESTION (UNDERSCORE) 

/* German @ */
#define GER_AT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))


#define COPY (LC(C)) 
#define PASTE (LC(V)) 

#define WORD_LEFT (LC(LEFT)) 
#define WORD_RIGHT (LC(RIGHT)) 


// Backtick (`) dead key
ZMK_BEHAVIOR(GER_BACKTICK, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp PLUS &kp SPACE>;
)

// Caret (^) dead key
ZMK_BEHAVIOR(GER_CARET, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp GRAVE &kp SPACE>;
)


// Layer 0 - Regular
ZMK_LAYER(default_layer,
        &kp ESC      &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                                       &mo 4 &kp N6 &kp N7 &kp N8    &kp N9       &kp N0          &kp GER_SZ
        &kp GER_UA   &kp Q     &kp W    &kp F    &kp P      &kp B  &none                                                                        &none &kp J  &kp L  &kp U     &kp GER_Y    &kp GER_UNDER   &kp GER_UU
        &kp TAB      &kp A     &kp R    &kp S    &kp T      &kp G  &none            &kp COPY  &kp PASTE &none &none &kp LGUI  &kp RCTRL          &none &kp M  &kp N  &kp E     &kp I        &kp O           &kp GER_UO
        &kp LSHFT    &kp GER_Z &kp X    &kp C    &kp D      &kp V         &none     &none     &kp DEL   &none &none &kp LALT  &none     &none          &kp K  &kp H  &kp COMMA &kp DOT      &kp GER_SEMI    &mo RSHFT
        &kp LCTRL    &kp HOME  &kp END  &kp LEFT &kp RIGHT                &kp SPACE &kp BSPC  &mo 3                 &mo 2     &mo 1     &kp RETURN            &kp UP &kp DOWN  &kp GER_PARA &kp PRINTSCREEN &kp RCTRL
)

// Layer 1 - Shift
ZMK_LAYER(shift_layer,
        &kp ESC     &kp N1     &kp N2     &kp N3     &kp N4     &kp N5     &trans                                                                                    &mo 4 &kp N6     &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp GER_SZ
        &kp GERS_UA &kp GERS_Q &kp GERS_W &kp GERS_F &kp GERS_P &kp GERS_B &none                                                                                     &none &kp GERS_J &kp GERS_L &kp GERS_U   &kp GERS_Y    &kp KP_MINUS    &kp GERS_UU
        &kp TAB     &kp GERS_A &kp GERS_R &kp GERS_S &kp GERS_T &kp GERS_G &none             &kp COPY  &kp PASTE &none     &none     &kp LGUI   &kp RCTRL             &none &kp GERS_M &kp GERS_N &kp GERS_E   &kp GERS_I    &kp GERS_O      &kp GERS_UO
        &kp LSHFT   &kp GERS_Z &kp GERS_X &kp GERS_C &kp GERS_D &kp GERS_V          &none    &none     &kp HOME  &none     &none     &kp PG_UP  &none      &none            &kp GERS_K &kp GERS_H &trans       &trans        &trans          &trans
        &trans      &trans     &trans     &kp LEFT   &kp RIGHT                      &kp BSPC &kp DEL   &kp END                       &kp PG_DN  &trans     &kp SPACE                   &kp UP     &kp DOWN     &trans        &trans          &trans
)

// Layer 2 - Symbol
ZMK_LAYER(symbol_layer,
        &kp F1 &kp F2          &kp F3        &kp F4       &kp F5        &kp F6        &tog 1                                                      &mo 4  &kp F7        &kp F8         &kp F9          &kp F10       &kp F11          &kp F12
        &trans &kp GER_SQT     &kp GER_LT    &kp GER_GT   &kp GER_DQT   &kp GER_DOT   &none                                                       &none  &kp GER_AMPS  &kp GER_EURO   &kp GER_LBKT    &kp GER_RBKT  &kp GER_PERCENT  &trans
        &trans &kp EXCLAMATION &kp GER_MINUS &kp GER_PLUS &kp GER_EQUAL &kp GER_HASH  &none        &trans &trans &none &none &trans &trans        &none  &kp GER_PIPE  &kp GER_COLON  &kp GER_LPAR    &kp GER_RPAR  &kp GER_QUESTION &trans
        &trans &GER_CARET      &kp GER_SLASH &kp GER_STAR &kp GER_BSLH  &GER_BACKTICK &none  &none  &trans &none &none &trans &none  &none               &kp GER_TILDE &kp GER_DOLLAR &kp GER_LBRC    &kp GER_RBRC  &kp GER_AT       &trans
        &trans &trans          &trans        &trans       &trans                             &trans &trans &trans             &trans &trans &trans                     &trans         &trans          &trans        &trans           &trans
)

// Layer 3 - Function
ZMK_LAYER(fn_layer,
        &kp F1 &kp F2      &kp F3       &kp F4       &kp F5       &kp F6       &tog 1                                                                                                         &mo 4                  &kp F7       &kp F8        &kp F9       &kp F10      &kp F11        &kp F12
        &none  &none       &none        &none        &none        &none        &none                                                                                                          &none                  &none        &none         &kp UP       &none        &none          &none
        &none  &none       &none        &none        &none        &none        &none                                  &none      &none      &none &none &none      &none                      &none                  &none        &kp WORD_LEFT &kp LEFT     &kp RIGHT    &kp WORD_RIGHT &none
        &none  &none       &none        &none        &none        &none                               &none           &none      &none      &none &none &none      &none      &none                                  &none        &none         &kp DOWN     &none        &none          &none
        &none  &none       &none        &none        &none                                            &none           &none      &none                  &none      &none      &none                                               &none         &none        &none        &none          &none
)

// Layer 4 - Mod
ZMK_LAYER(mod_layer,
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                                                          &trans                 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
        &none &none        &none        &none        &none        &none        &bootloader                                                                                                    &bootloader            &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none        &rgb_ug RGB_MEFS_CMD 5                 &bt BT_CLR &bt BT_CLR &none &none &bt BT_CLR &bt BT_CLR                 &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none                               &none           &none      &none      &none &none &none      &none      &none                                  &none        &none        &none        &none        &none        &none
        &none &none        &none        &bl BL_INC   &bl BL_DEC                                       &rgb_ug RGB_TOG &bl BL_TOG &none                  &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none        &none        &none
)
