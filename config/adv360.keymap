/* Defines Colemak-DHm for programmers with german characters on a Kinesis Advantage 360 */
/* Intended to use with the german keyboard layout. */

/* standard includes for keys, bluetooth, rgb and backlight */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/* Include zmk-nodefree macros for convenience */
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_adv360.h"
#include "../zmk-nodefree-config/international_chars/german_alt.dtsi"

/* layer and key shortcuts */
#define ___ &trans
#define DEF 0
#define NAV 1
#define NUM 2
#define GER 3

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
)

#define GER_Y (Z)
#define GER_Z (Y)

#define GERS_A (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_A)))
#define GERS_B (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_B)))
#define GERS_C (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_C)))
#define GERS_D (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_D)))
#define GERS_E (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_E)))
#define GERS_F (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_F)))
#define GERS_G (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_G)))
#define GERS_H (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_H)))
#define GERS_I (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_I)))
#define GERS_J (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_J)))
#define GERS_K (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_K)))
#define GERS_L (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_L)))
#define GERS_M (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_M)))
#define GERS_N (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_N)))
#define GERS_O (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_O)))
#define GERS_P (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_P)))
#define GERS_Q (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))
#define GERS_R (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_R)))
#define GERS_S (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_S)))
#define GERS_T (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_T)))
#define GERS_U (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_U)))
#define GERS_V (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_V)))
#define GERS_W (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_W)))
#define GERS_X (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_X)))
#define GERS_Y (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Z)))
#define GERS_Z (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Y)))

#define GER_UA (SINGLE_QUOTE)
#define GER_UU (LEFT_BRACKET)
#define GER_UO (SEMICOLON)
#define GER_SZ (MINUS)

#define GERS_UA (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Z)))
#define GERS_UU (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE)))
#define GERS_UO (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SEMICOLON_AND_COLON)))
#define GERS_SZ (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))

// Backtick dead key
ZMK_BEHAVIOR(GER_BACKTICK, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp PLUS &kp SPACE>;
)


// Layer 0
ZMK_LAYER(default_layer,
        &kp ESC      &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                                       &mo 3 &kp N6 &kp N7 &kp N8    &kp N9    &kp N0        &kp GER_SZ
        &kp GER_UA   &kp Q     &kp W    &kp F    &kp P      &kp B  &none                                                                        &none &kp J  &kp L  &kp U     &kp GER_Y &GER_BACKTICK &kp GER_UU
        &kp TAB      &kp A     &kp R    &kp S    &kp T      &kp G  &none            &kp LCTRL &kp LALT &none &none &kp LGUI  &kp RCTRL          &none &kp M  &kp N  &kp E     &kp I     &kp O         &kp GER_UO
        &mo 1        &kp GER_Z &kp X    &kp C    &kp D      &kp V         &none     &none     &kp HOME &none &none &kp PG_UP &none     &none          &kp K  &kp H  &kp COMMA &kp DOT   &kp FSLH      &mo 1
        &kp LSHFT    &kp HOME  &kp END  &kp LEFT &kp RIGHT                &kp SPACE &mo 2     &kp BSPC             &kp PG_DN &mo 2     &kp SPACE             &kp UP &kp DOWN  &none     &kp BSLH      &kp RSHFT
)

// Layer 1
ZMK_LAYER(shift_layer,
        &kp ESC     &kp N1      &kp N2      &kp N3      &kp N4      &kp N5 &trans                                                                                    &mo 3 &kp N6     &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp GER_SZ
        &kp GERS_UA &kp GERS_Q &kp GERS_W &kp GERS_F &kp GERS_P &kp GERS_B &none                                                                                     &none &kp GERS_J &kp GERS_L &kp GERS_U   &kp GERS_Z    &kp KP_MINUS    &kp GERS_UU
        &kp ESC     &kp GERS_A &kp GERS_R &kp GERS_S &kp GERS_T &kp GERS_G &none             &kp LCTRL &kp LALT &none     &none     &kp LGUI   &kp RCTRL             &none &kp GERS_M &kp GERS_N &kp GERS_E   &kp GERS_O    &kp KP_PLUS     &kp GERS_UO
        &kp LSHFT   &kp GERS_Y &kp GERS_X &kp GERS_C &kp GERS_D &kp GERS_V          &none    &none     &kp HOME &none     &none     &kp PG_UP  &none      &none            &kp GERS_K &kp GERS_H   &kp KP_N2  &kp KP_N3     &kp KP_ENTER    &kp RSHFT
        &mo 2       &kp GRAVE  &kp CAPS   &kp LEFT   &kp RIGHT                      &kp BSPC &kp DEL   &kp END                      &kp PG_DN  &trans     &kp SPACE                   &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
)

// Layer 2
ZMK_LAYER(fn,
        &kp F1 &kp F2          &kp F3 &kp F4          &kp F5 &kp F6  &tog 1                                                      &mo 3 &kp F7 &kp F8 &kp F9          &kp F10 &kp F11         &kp F12
        &trans &trans          &trans &trans          &trans &trans  &none                                                       &none &trans &trans &trans          &trans  &trans          &trans
        &trans &trans          &trans &trans          &trans &trans  &none        &trans &trans &none &none &trans &trans        &none &trans &trans &trans          &trans  &trans          &trans
        &trans &trans          &trans &trans          &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans          &trans  &trans          &trans
        &trans &trans          &trans &trans          &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans          &trans  &trans          &trans
)

// Layer 3
ZMK_LAYER(mod,
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                                                          &trans                 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
        &none &none        &none        &none        &none        &none        &bootloader                                                                                                    &bootloader            &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none        &rgb_ug RGB_MEFS_CMD 5                 &bt BT_CLR &bt BT_CLR &none &none &bt BT_CLR &bt BT_CLR                 &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none                               &none           &none      &none      &none &none &none      &none      &none                                  &none        &none        &none        &none        &none        &none
        &none &none        &none        &bl BL_INC   &bl BL_DEC                                       &rgb_ug RGB_TOG &bl BL_TOG &none                  &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none        &none        &none
)
